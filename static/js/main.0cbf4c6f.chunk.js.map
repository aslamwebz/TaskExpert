{"version":3,"sources":["components/Card/index.js","components/CardManager/CardManager.js","components/Data/Data.js","components/Home/index.js","actions/taskActions.js","actions/types.js","components/Navbar.js","reducers/taskReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","_style","_useState","useState","item","text","_useState2","Object","slicedToArray","textValue","setTextValue","_useState3","description","_useState4","descValue","setDescValue","_useState5","_useState6","setreadOnly","_useState7","_useState8","visible","setVisible","style","height","width","fontSize","padding","defineProperty","submitHandle","e","preventDefault","task","id","taskChange","react_default","a","createElement","react_beautiful_dnd_esm","draggableId","listID","index","provided","assign","className","ref","innerRef","draggableProps","dragHandleProps","onClick","rodal_default","onClose","onSubmit","type","onChange","target","value","react_textarea_autosize_esm_browser","defaultValue","minRows","cols","taskDelete","placeholder","CardManager","droppableId","droppableProps","tasks","map","Card","key","Data","task-1","task-2","task-3","task-5","task-4","task-6","task-7","task-8","task-9","columnData","columns","column-1","title","taskIds","background","column-2","column-3","taskCount","connect","state","data","datas","columnChange","column","val","dispatch","payload","objectSpread","fetchData","addArea","columnum","length","concat","toConsumableArray","emptyColumn","addTask","tasknum","taskName","dragEnd","result","destination","source","begin","end","_objectSpread6","startTasksIds","Array","from","splice","newStart","endTaskIds","newEnd","taskIDs","newColumn","colorChange","color","hex","deleteColumn","d","filter","col","deleteTask","taskid","setData","setColumnChange","useEffect","container","margin","btn","textAlign","border","fonSize","colorchange","Swal","fire","position","showConfirmButton","timer","content","input","inputAttributes","autocapitalize","showCancelButton","confirmButtonText","showLoaderOnConfirm","preConfirm","colValue","console","log","allowOutsideClick","isLoading","then","columnShow","components_CardManager_CardManager","onDragEnd","Navbar","showhide","GithubCorner_default","href","direction","size","data-toggle","data-target","aria-controls","aria-expanded","aria-label","lib","onChangeComplete","initialState","combineReducers","arguments","undefined","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","App","_this","setState","es","this","components_Navbar","components_Home","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0cbf4c6f.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport {Draggable} from 'react-beautiful-dnd'\r\nimport Textarea  from 'react-textarea-autosize'\r\nimport Rodal from 'rodal';\r\nimport 'rodal/lib/rodal.css';\r\n\r\nconst Home = props => {\r\n\r\n    const [textValue, setTextValue] = useState(props.item.text)\r\n    const [descValue, setDescValue] = useState(props.item.description)\r\n    const [readOnly, setreadOnly] = useState(true)\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const style={\r\n        height:'40px',\r\n        width:'100%',\r\n        fontSize:'18px',\r\n        padding:'13px 15px',\r\n        height:'50px',\r\n        fontWeight:'500',\r\n        background:'white',\r\n        margin:'3px 0',\r\n        border:'1px solid #dfe1e6',\r\n        borderRadius:' 5px',\r\n        boxShadow: '0 1px 0 rgba(9,30,66,.25)',\r\n        overflow:'hidden',\r\n    }\r\n\r\n    const openWindow = (val) => {\r\n        setreadOnly(val)\r\n        setVisible(true)\r\n    }\r\n\r\n    const submitHandle = (e) => {\r\n        e.preventDefault()\r\n        const task = {\r\n                id: props.item.id,\r\n                text: textValue, \r\n                description:descValue\r\n        }\r\n\r\n        setVisible(false)\r\n        props.taskChange(task,props.item.id)\r\n    }\r\n\r\n  return (\r\n        <Draggable draggableId={props.listID} index={props.index}>\r\n            {provided => (\r\n                <div  className=\"input-group \" ref={provided.innerRef}{...provided.draggableProps} {...provided.dragHandleProps}  >\r\n                    {/* <h4 onMouseEnter={() => console.log('only touch')} onClick={() => console.log('click')}>{value}</h4> */}\r\n                    \r\n                    <div onClick={() => openWindow(true)} style={style}>\r\n                        {textValue}\r\n                    </div>\r\n\r\n                    <Rodal visible={visible} onClose={() => setVisible(false)}\r\n                        height={500}\r\n                        width={700}>\r\n                            <form onSubmit={submitHandle} id=\"taskform\">\r\n                                <div className=\"form-group\">\r\n                                    <label >Title</label>\r\n                                    <input type=\"text\" className=\"form-control\"  onChange={(e) => setTextValue(e.target.value)}\r\n                                    value={textValue}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label >Description</label>\r\n                                    <Textarea className=\"form-control\"  \r\n                                    onChange={(e) => setDescValue(e.target.value)}\r\n                                    defaultValue={descValue}\r\n                                    minRows={8}\r\n                                    cols={0}\r\n                                    ></Textarea>\r\n                                </div>\r\n                                <button className=\"btn btn-danger float-right\" type=\"button\" onClick={() => props.taskDelete(props.item.id)}><span><i className=\"far fa-trash-alt\"></i></span>&nbsp; Delete</button>\r\n                                <button className=\"btn btn-info\" type=\"submit\"><span ><i className=\"fas fa-save\"></i></span>&nbsp; Save</button>\r\n                            </form>\r\n                     </Rodal>\r\n                    \r\n                 {provided.placeholder}\r\n\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default Home\r\n\r\n\r\n","import React from 'react'\r\nimport Card from '../Card'\r\nimport { Droppable } from 'react-beautiful-dnd'\r\n\r\n\r\n\r\n\r\nconst CardManager = (props) => {\r\n\r\n    // const colorchange = (color, column) => {\r\n    //     console.log(props, column)\r\n\r\n    //     // props.colorchange(color, props.item)\r\n    // }\r\n\r\n  return (\r\n       <Droppable \r\n            droppableId={props.item} \r\n            >\r\n                    {provided => (\r\n                        <div \r\n                         ref={provided.innerRef}\r\n                        {...provided.droppableProps}\r\n                        >\r\n                        {props.tasks.map((task, index) => (\r\n                            <Card key={task.id} listID={task.id} index={index} item={task}\r\n                             taskChange={props.taskChange}\r\n                             taskDelete={props.taskDelete} />\r\n                        ))}\r\n                                \r\n\r\n                            {provided.placeholder}\r\n                        </div>\r\n\r\n                    )}\r\n\r\n        </Droppable>\r\n  )\r\n}\r\n\r\nexport default CardManager\r\n","export const Data = {\r\n    tasks :{\r\n         'task-1':{id: 'task-1', text: 'Walk your Cat',description:'column-1'},\r\n         'task-2':{id: 'task-2', text: 'Fix your porch',description:'column-2'},\r\n         'task-3':{id: 'task-3', text: 'Gather firewood',description:'column-3'},\r\n         'task-5':{id: 'task-5', text: 'Dance with white fairy',description:'column-1'},\r\n         'task-4':{id: 'task-4', text: 'Feed your dragon',description:'column-2'},\r\n         'task-6':{id: 'task-6', text: 'Light up the mountain',description:'column-3'},\r\n         'task-7':{id: 'task-7', text: 'Build a pirate ship',description:'column-1'},\r\n         'task-8':{id: 'task-8', text: 'Say no Darth Vadar',description:'column-2'},\r\n         'task-9':{id: 'task-9', text: 'Please enter a title',description:'column-2'},\r\n    },\r\n    columnData:['column-1','column-2','column-3'],\r\n    columns:{\r\n        'column-1': {\r\n            id: 'column-1',\r\n            title: \"Open\",\r\n            taskIds:['task-1','task-4','task-7',],\r\n            background:['rgb(48, 191, 191)'],\r\n          },\r\n          'column-2': {\r\n            id: 'column-2',\r\n            title: 'In Progress',\r\n            taskIds:['task-2','task-5','task-8',],\r\n            background:['rgb(0, 170, 255)'],\r\n          },\r\n          'column-3': {\r\n            id: 'column-3',\r\n            title: 'Done',\r\n            taskIds:['task-3','task-6',],\r\n            background:['rgb(143, 126, 230)'],\r\n          }\r\n    },\r\n    taskCount:8\r\n}\r\n\r\n ","import React, {useState, useEffect} from 'react'\r\nimport CardManager from '../CardManager/CardManager'\r\nimport Rodal from 'rodal'\r\nimport  {TwitterPicker} from 'react-color'\r\nimport { connect } from 'react-redux'\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport Swal from 'sweetalert2'\r\n\r\nimport { fetchData, addArea, addTask, dragEnd,colorChange,taskChange,columnChange, deleteColumn, deleteTask} from '../../actions/taskActions'\r\n\r\n\r\nconst Home = props => {\r\n\r\n    const [data, setData] = useState([])\r\n    const [visible, setVisible] = useState(false)\r\n    const [columnChange, setColumnChange] = useState(false)\r\n    \r\n    useEffect(() => {\r\n        props.fetchData()\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        setData(props.data)\r\n        // console.log(props.data)\r\n    }, [props.data])\r\n\r\n\r\n    const addArea = () => {\r\n       props.addArea(props.data)\r\n    }\r\n\r\n    const style={\r\n        'container':{\r\n            fontSize:'12px',\r\n            padding:0,\r\n            // background:'rgba(50,60,80,.75)',\r\n            margin:'5px',\r\n            \r\n    \r\n        },\r\n        'btn':{\r\n            textAlign:'center',\r\n            border:'none',\r\n            background:'none',\r\n            fonSize:'16px',\r\n        }, \r\n    }\r\n\r\n    const dragEnd = result => {\r\n     props.dragEnd(result, props.data)\r\n    }\r\n\r\n    const addTask = (column) => {\r\n        props.addTask(column, data)\r\n    }\r\n\r\n    const showhide = () =>{\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const colorchange = (color, column) => {\r\n        props.colorChange(color, column , props.data)\r\n    }\r\n\r\n    const taskChange = (task, id) => {\r\n        props.taskChange(task, id, props.data)\r\n        Swal.fire({\r\n            position: 'top-end',\r\n            type: 'success',\r\n            title: 'Your work has been saved',\r\n            showConfirmButton: false,\r\n            timer: 1500\r\n          })\r\n    }\r\n\r\n    const columnShow = (column) => {\r\n        setColumnChange(true)\r\n        // return(\r\n        //     <Rodal visible={true} onClose={() => setColumnChange()}>\r\n        //         {console.log(column)}\r\n        //       <Column columnChange={columnChangeManager} column={column} data={props.data}/>\r\n        //    </Rodal>\r\n        // )\r\n        Swal.fire({\r\n            title: 'Please Enter a Column Name',\r\n            input: 'text',\r\n            inputAttributes: {\r\n              autocapitalize: 'on'\r\n            },\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Save',\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: (colValue) => {\r\n                console.log(colValue)\r\n                props.columnChange(column, colValue, props.data)\r\n            },\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n          }).then((result) => {\r\n            Swal.fire({\r\n                position: 'top-end',\r\n                type: 'success',\r\n                title: 'Your work has been saved',\r\n                showConfirmButton: false,\r\n                timer: 1500\r\n              })\r\n          })\r\n    }\r\n\r\n\r\n    const content =  props.data.columnData.map(item => {\r\n                    const column = props.data.columns[item]\r\n                    let tasks = ''\r\n                    if(column.taskIds !== ''){\r\n                        tasks = column.taskIds.map(id =>props. data.tasks[id])\r\n                    }\r\n                   return(\r\n                    <div className=\"\" key={item} style={style.container}>\r\n                        <div className=\"card\">\r\n                            <div className=\"card-header\" style={{background:props.data.columns[item].background}} \r\n                            \r\n                          >\r\n                                <h4 className=\"m-4\"  >{props.data.columns[item].title}\r\n                                <button className=\"float-right btn btn-outline\" onClick={() => props.deleteColumn(item, props.data)}><span ><i className=\"far fa-trash-alt\"></i></span></button>\r\n                                <button className=\"float-right btn btn-outline\" onClick={() => columnShow(column)}><span><i className=\"far fa-edit\"></i></span></button>\r\n                                </h4>\r\n                                {/* <button onClick={() => showhide()}>ChangeColor</button> */}\r\n                                {/* <Rodal visible={visible} onClose={() => showhide()}>\r\n                                    <div className=\"d-flex justify-content-center\">\r\n                                        <TwitterPicker onChangeComplete={(color) => colorchange(color, item) }/>\r\n                                    </div>\r\n                                </Rodal> */}\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <CardManager item={item} \r\n                                 tasks={tasks} \r\n                                colorchange={colorchange}\r\n                                taskChange={taskChange}\r\n                                taskDelete={(id) => props.deleteTask(id, item, props.data)}\r\n                                // showhide={showhide}\r\n                                // visible={visible}\r\n                                />\r\n                            </div>\r\n                            <div className=\"card-footer\">\r\n                                <button onClick={() => addTask(item)} style={style.btn}> <i className=\"fas fa-plus\"></i> &nbsp;  Add a task</button>    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                   )\r\n                } \r\n                )\r\n                \r\n                \r\n\r\n  return (\r\n    <DragDropContext onDragEnd={dragEnd}>\r\n        <div className=\"row m-2 flex-row flex-sm-nowrap pt-2\" id=\"content\">\r\n        {content}\r\n            <div className=\"col-sm-4 col-md-3 d-flex justify-content-center\" >\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <button className=\"btn btn-info\" onClick={() => addArea()} ><i className=\"fas fa-plus\"></i> &nbsp;  Add another List</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div> \r\n       \r\n    </DragDropContext> \r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    data:state.datas.data\r\n})\r\n\r\nexport default connect(mapStateToProps, {columnChange, fetchData, addArea, addTask, dragEnd, colorChange, taskChange, deleteColumn, deleteTask})(Home)\r\n","import {FETCH_DATA, NEW_TASK,COLUMN_CHANGE, TASK_CHANGE, NEW_COLUMN, DRAG_END, COLOR_CHANGE, DELETE_COLUMN, DELETE_TASK} from './types'\r\nimport { Data } from '../components/Data/Data'\r\n\r\nexport const fetchData = () => dispatch => {\r\n    // console.log('fetch',Data)\r\n    const D = Data\r\n    dispatch({\r\n        type:FETCH_DATA,\r\n        payload:D\r\n    })\r\n}\r\n\r\nexport const addArea = (data) => dispatch => {\r\n    let columnum = data.columnData.length + 1\r\n    columnum = 'column-' + columnum\r\n    let columns = [...data.columnData, columnum]\r\n    let emptyColumn = {\r\n        ...data.columns, \r\n        [columnum]:{\r\n            id:columnum,\r\n            title:'Add a title',\r\n            taskIds:[],\r\n            background:'rgb(48, 191, 191)',\r\n        }\r\n    }\r\n    let d = {\r\n            ...data,\r\n            columns:emptyColumn,\r\n            columnData:columns\r\n    }\r\n\r\n    dispatch({\r\n        type:NEW_COLUMN,\r\n        payload:d\r\n    })\r\n}\r\n\r\nexport const addTask = (column, data) => dispatch => {\r\n    const tasknum = data.taskCount + 1\r\n        const taskName = 'task-' + tasknum\r\n        const tasks = {\r\n            ...data.tasks, \r\n            [taskName]:{\r\n                id: taskName,\r\n                text: 'Please Enter A Topic', \r\n                column:column}\r\n        }\r\n\r\n        const taskIds = [...data.columns[column].taskIds, taskName]\r\n\r\n        const columns = {\r\n            ...data.columns, \r\n            [column]:{\r\n                ...data.columns[column],\r\n                taskIds\r\n            }\r\n        }\r\n\r\n        const d = {\r\n                ...data,\r\n                columns:columns,\r\n                taskCount:tasknum,\r\n                tasks:tasks,\r\n        }\r\n\r\n        dispatch({\r\n            type:NEW_TASK,\r\n            payload:d\r\n        })\r\n}\r\n\r\nexport const dragEnd = (result, data) => dispatch => {\r\n\r\n    let returnData = ''\r\n\r\n    const {destination, source, draggableId} = result\r\n    if(!destination){\r\n        return;\r\n    }\r\n    \r\n  if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const begin = data.columns[source.droppableId];\r\n    const end = data.columns[destination.droppableId];\r\n\r\n    if (begin === end) {\r\n       \r\n      const taskIDs = Array.from(begin.taskIds);\r\n      taskIDs.splice(source.index, 1);\r\n      taskIDs.splice(destination.index, 0, draggableId);\r\n\r\n      const newColumn = {\r\n          ...begin, \r\n          taskIds:taskIDs\r\n      }\r\n\r\n      const newData = {\r\n          ...data,\r\n          columns:{\r\n              ...data.columns,\r\n              [newColumn.id]:newColumn\r\n          }\r\n      }\r\n\r\n      returnData = newData\r\n\r\n      return;\r\n    } else {\r\n      const startTasksIds = Array.from(begin.taskIds)\r\n      startTasksIds.splice(source.index, 1)\r\n      const newStart = {\r\n          ...begin,\r\n          taskIds:startTasksIds\r\n      }\r\n\r\n      const endTaskIds = Array.from(end.taskIds)\r\n      endTaskIds.splice(destination.index, 0, draggableId)\r\n      const newEnd = {\r\n          ...end,\r\n          taskIds:endTaskIds\r\n      }\r\n\r\n      const newData = {\r\n          ...data,\r\n          columns:{\r\n              ...data.columns,\r\n              [newStart.id]:newStart,\r\n              [newEnd.id]:newEnd\r\n          }\r\n      }\r\n      returnData = newData\r\n    }\r\n\r\n\r\n    dispatch({\r\n        type:DRAG_END,\r\n        payload:returnData\r\n    })\r\n\r\n}\r\n\r\nexport const colorChange = (color, column, data) => dispatch => {\r\n    \r\n    const columns = {\r\n        ...data.columns, \r\n        [column]:{\r\n            ...data.columns[column],\r\n            background:color.hex\r\n        }\r\n    }\r\n    const d = {\r\n        ...data,\r\n        columns:columns,\r\n    }\r\n\r\n    dispatch({\r\n        type:COLOR_CHANGE,\r\n        payload:d\r\n    })\r\n}\r\n\r\nexport const taskChange = (task, id, data) => dispatch => {\r\n\r\n    let tasks = {\r\n        ...data.tasks,\r\n       [id]:task\r\n    }\r\n\r\n    let d = {\r\n        ...data,\r\n        tasks:tasks\r\n    }\r\n\r\n    dispatch({\r\n        type:TASK_CHANGE,\r\n        payload:d\r\n    })\r\n}\r\n\r\nexport const columnChange = (column, val, data) => dispatch => {\r\n    let d = {\r\n        ...data,\r\n        columns:{\r\n            ...data.columns,\r\n            [column.id]:{\r\n                id:column.id,\r\n                title:val,\r\n                taskIds:column.taskIds,\r\n                background:column.background\r\n            }\r\n        }\r\n    }\r\n\r\n    // console.log(d)\r\n\r\n    dispatch({\r\n        type:COLUMN_CHANGE,\r\n        payload:d\r\n    })\r\n}\r\n\r\nexport const deleteColumn = (id, data) => dispatch => {\r\n    let d =  data.columnData\r\n\r\n    d = d.filter(col => col !== id)\r\n\r\n    const datas =  {\r\n        ...data,\r\n        columnData:d\r\n    }\r\n\r\n    dispatch({\r\n        type:DELETE_COLUMN,\r\n        payload:datas\r\n    })\r\n}\r\n\r\nexport const deleteTask = (id, column, data) => dispatch => {\r\n    let d =  data.columns[column]\r\n   \r\n    d = d.taskIds.filter(taskid => taskid !== id)\r\n\r\n    const datas = {\r\n        ...data,\r\n        columns:{\r\n            ...data.columns,\r\n            [column]:{\r\n                ...data.columns[column],\r\n                taskIds:d\r\n            }\r\n        }\r\n    }\r\n   \r\n    dispatch({\r\n        type:DELETE_TASK,\r\n        payload:datas\r\n    })\r\n   }","export const FETCH_DATA = 'FETCH_TASKS'\r\nexport const NEW_TASK = 'NEW_TASK'\r\nexport const NEW_COLUMN = 'NEW_COLUMN'\r\nexport const DRAG_END = 'DRAG_END'\r\nexport const COLOR_CHANGE = 'COLOR_CHANGE'\r\nexport const TASK_CHANGE = 'TASK_CHANGE'\r\nexport const COLUMN_CHANGE = 'COLUMN_CHANGE'\r\nexport const DELETE_COLUMN = 'DELETE_COLUMN'\r\nexport const DELETE_TASK = 'DELETE_TASK'\r\n","import React, {useState} from 'react'\r\nimport GithubCorner from 'react-github-corner';\r\nimport { TwitterPicker } from 'react-color';\r\nimport Rodal from 'rodal';\r\n\r\n// include styles\r\nimport 'rodal/lib/rodal.css';\r\n\r\n\r\nconst Navbar = (props) => {\r\n\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    // const clickHandle = () => {\r\n    //     props.openCart(true)\r\n    // }\r\n\r\n    const showhide = () =>{\r\n        setVisible(!visible)\r\n    }\r\n\r\n    return(\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n         <div className=\"container\">\r\n         <GithubCorner href=\"https://github.com/aslamwebz?tab=repositories\" direction=\"left\" size=\"90\"/>\r\n          <a className=\"navbar-brand\" href=\"/TaskExpert\">Tasker</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                <li className=\"nav-item active\">\r\n                    <button className=\"nav-link\" onClick={showhide}>Change Color</button>\r\n                </li>\r\n                {/* <li className=\"nav-item\">\r\n                    <button className=\"nav-link active btn btn-danger\" onClick={clickHandle}> <i className=\"fas fa-shopping-cart\"></i>&nbsp;View Cart</button>\r\n                </li> */}\r\n                {/* <li className=\"nav-item\">\r\n                    <a className=\"nav-link\" href=\"#\">Pricing</a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a className=\"nav-link disabled\" href=\"#\">Disabled</a>\r\n                </li> */}\r\n                </ul>\r\n            </div>\r\n          </div>\r\n\r\n            <Rodal visible={visible} onClose={() => showhide()}>\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <TwitterPicker onChangeComplete={props.colorchange}/>\r\n                </div>\r\n            </Rodal>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\n// const mapStateToProps = state => ({\r\n//     open:state.items.open,\r\n// })\r\n\r\n// export default connect(mapStateToProps, {openCart})(Navbar)\r\n\r\nexport default Navbar","import {FETCH_DATA,NEW_COLUMN,COLUMN_CHANGE, NEW_TASK,TASK_CHANGE, DRAG_END,COLOR_CHANGE, DELETE_COLUMN, DELETE_TASK} from '../actions/types'\r\n\r\nconst initialState = {\r\n    data:{tasks :{\r\n   },\r\n   columnData:[],\r\n   columns:{\r\n       \r\n   },\r\n   taskCount:8},\r\n    task:{}\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case FETCH_DATA:\r\n        // console.log('Fetch Data Reducer', action.payload)\r\n            return{\r\n                ...state,\r\n                data:action.payload\r\n            }\r\n        case NEW_COLUMN:\r\n            return{\r\n                ...state,\r\n                data:action.payload\r\n            }\r\n        case NEW_TASK:\r\n            return{\r\n                ...state,\r\n                data:action.payload\r\n            }\r\n        case DRAG_END:\r\n            return{\r\n                ...state,\r\n                data:action.payload\r\n            }\r\n        case COLOR_CHANGE:\r\n            return{\r\n                ...state,\r\n                data:action.payload\r\n            }\r\n        case TASK_CHANGE:\r\n            return{\r\n                ...state,\r\n                data:action.payload\r\n            }\r\n        case COLUMN_CHANGE:\r\n            return{\r\n                ...state,\r\n                data:action.payload\r\n            }\r\n        case DELETE_COLUMN:\r\n            return{\r\n                ...state,\r\n                data:action.payload\r\n            }\r\n        case DELETE_TASK:\r\n            return{\r\n                ...state,\r\n                data:action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport taskReducer from './taskReducer'\r\n\r\nexport default combineReducers({\r\n    datas:taskReducer\r\n})","import {createStore, compose, applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n      applyMiddleware(...middleware),\r\n  )\r\n)\r\n\r\nexport default store","import React from 'react';\nimport './App.css';\nimport Home from './components/Home'\nimport Navbar from './components/Navbar'\nimport {Provider} from 'react-redux'\nimport store from './store'\nimport Testdoc from './Testdoc'\n\n\n\nclass App extends React.Component{\n\n  state = {\n    color:''\n  }\n\n  colorchange = (color) => {\n    this.setState({\n      color:color.hex\n    })\n    console.log(this.state.color)\n  }\n\n  dragEnd = () => {\n    console.log('hi')\n  }\n\n  render(){\n    return (\n      <Provider store={store}>\n            <div className=\"App\" style={{background:this.state.color, height:'100vh !important'}}>\n                <Navbar colorchange={this.colorchange}/>\n                <Home />\n            </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}